{"ast":null,"code":"import axios from 'axios';\n\n// Use environment variable for API URL in production, otherwise default to localhost\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api'; // Adjust port if needed\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Finds cheaper houses nearby based on search parameters.\n * @param {object} searchParams - The search parameters.\n * @param {object} searchParams.defaultArea - Defines the central area.\n * @param {string} searchParams.defaultArea.type - Type of area (e.g., 'Circle').\n * @param {object} searchParams.defaultArea.center - Center coordinates { lat, lng }.\n * @param {number} searchParams.defaultArea.radius - Radius in meters.\n * @param {number} searchParams.searchProximity - Distance around default area to search (meters).\n * @param {object} [searchParams.filters={}] - Optional filters { minPrice, maxPrice, minBeds, etc. }.\n * @returns {Promise<object>} - The API response data { success, benchmarkPrice, housesInAreaCount, cheaperNearbyHouses, message? }.\n * @throws {Error} - Throws an error if the API call fails or returns success: false.\n */\nexport const findCheaperNearbyHouses = async searchParams => {\n  try {\n    console.log('Sending search params:', searchParams);\n    const response = await apiClient.post('/houses/find-cheaper-nearby', searchParams);\n\n    // Check if the backend indicated success explicitly (optional but good practice)\n    if (!response.data || response.data.success === false) {\n      var _response$data;\n      // Use message from backend if available, otherwise generic error\n      throw new Error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || 'API returned unsuccessful response.');\n    }\n    return response.data; // Contains { success: true, benchmarkPrice, housesInAreaCount, cheaperNearbyHouses, message? }\n  } catch (error) {\n    console.error(\"API Error:\", error.response || error.message || error);\n\n    // Extract a meaningful error message\n    let errorMessage = 'Failed to fetch data from server.';\n    if (error.response) {\n      var _error$response$data;\n      // Request made and server responded with a status code outside 2xx range\n      errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Server error: ${error.response.status}`;\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = 'No response from server. Please check network connection or if the server is running.';\n    } else if (error.message) {\n      // Something happened in setting up the request that triggered an Error\n      errorMessage = error.message;\n    }\n\n    // Re-throw an error with a user-friendly message\n    throw new Error(errorMessage);\n  }\n};\n\n// Add other API functions here if needed (e.g., fetching house details)","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","findCheaperNearbyHouses","searchParams","console","log","response","post","data","success","_response$data","Error","message","error","errorMessage","_error$response$data","status","request"],"sources":["/Users/telmonmaluleka/learn-react-app/MVP/Cheaper-Houses-Nearby/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use environment variable for API URL in production, otherwise default to localhost\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api'; // Adjust port if needed\n\nconst apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n/**\n * Finds cheaper houses nearby based on search parameters.\n * @param {object} searchParams - The search parameters.\n * @param {object} searchParams.defaultArea - Defines the central area.\n * @param {string} searchParams.defaultArea.type - Type of area (e.g., 'Circle').\n * @param {object} searchParams.defaultArea.center - Center coordinates { lat, lng }.\n * @param {number} searchParams.defaultArea.radius - Radius in meters.\n * @param {number} searchParams.searchProximity - Distance around default area to search (meters).\n * @param {object} [searchParams.filters={}] - Optional filters { minPrice, maxPrice, minBeds, etc. }.\n * @returns {Promise<object>} - The API response data { success, benchmarkPrice, housesInAreaCount, cheaperNearbyHouses, message? }.\n * @throws {Error} - Throws an error if the API call fails or returns success: false.\n */\nexport const findCheaperNearbyHouses = async (searchParams) => {\n    try {\n        console.log('Sending search params:', searchParams);\n        const response = await apiClient.post('/houses/find-cheaper-nearby', searchParams);\n\n        // Check if the backend indicated success explicitly (optional but good practice)\n        if (!response.data || response.data.success === false) {\n            // Use message from backend if available, otherwise generic error\n            throw new Error(response.data?.message || 'API returned unsuccessful response.');\n        }\n\n        return response.data; // Contains { success: true, benchmarkPrice, housesInAreaCount, cheaperNearbyHouses, message? }\n\n    } catch (error) {\n        console.error(\"API Error:\", error.response || error.message || error);\n\n        // Extract a meaningful error message\n        let errorMessage = 'Failed to fetch data from server.';\n        if (error.response) {\n            // Request made and server responded with a status code outside 2xx range\n            errorMessage = error.response.data?.message || `Server error: ${error.response.status}`;\n        } else if (error.request) {\n            // The request was made but no response was received\n            errorMessage = 'No response from server. Please check network connection or if the server is running.';\n        } else if (error.message) {\n            // Something happened in setting up the request that triggered an Error\n            errorMessage = error.message;\n        }\n\n        // Re-throw an error with a user-friendly message\n        throw new Error(errorMessage);\n    }\n};\n\n// Add other API functions here if needed (e.g., fetching house details)\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B,CAAC,CAAC;;AAEnF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,YAAY,IAAK;EAC3D,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,YAAY,CAAC;IACnD,MAAMG,QAAQ,GAAG,MAAMR,SAAS,CAACS,IAAI,CAAC,6BAA6B,EAAEJ,YAAY,CAAC;;IAElF;IACA,IAAI,CAACG,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,KAAK,KAAK,EAAE;MAAA,IAAAC,cAAA;MACnD;MACA,MAAM,IAAIC,KAAK,CAAC,EAAAD,cAAA,GAAAJ,QAAQ,CAACE,IAAI,cAAAE,cAAA,uBAAbA,cAAA,CAAeE,OAAO,KAAI,qCAAqC,CAAC;IACpF;IAEA,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;EAE1B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACP,QAAQ,IAAIO,KAAK,CAACD,OAAO,IAAIC,KAAK,CAAC;;IAErE;IACA,IAAIC,YAAY,GAAG,mCAAmC;IACtD,IAAID,KAAK,CAACP,QAAQ,EAAE;MAAA,IAAAS,oBAAA;MAChB;MACAD,YAAY,GAAG,EAAAC,oBAAA,GAAAF,KAAK,CAACP,QAAQ,CAACE,IAAI,cAAAO,oBAAA,uBAAnBA,oBAAA,CAAqBH,OAAO,KAAI,iBAAiBC,KAAK,CAACP,QAAQ,CAACU,MAAM,EAAE;IAC3F,CAAC,MAAM,IAAIH,KAAK,CAACI,OAAO,EAAE;MACtB;MACAH,YAAY,GAAG,uFAAuF;IAC1G,CAAC,MAAM,IAAID,KAAK,CAACD,OAAO,EAAE;MACtB;MACAE,YAAY,GAAGD,KAAK,CAACD,OAAO;IAChC;;IAEA;IACA,MAAM,IAAID,KAAK,CAACG,YAAY,CAAC;EACjC;AACJ,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}